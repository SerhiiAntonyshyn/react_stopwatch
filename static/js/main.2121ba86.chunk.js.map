{"version":3,"sources":["components/stopwatch/stopwatch.tsx","components/services/stopwatchService.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Timer","lastClick","subscription","stopwatchServiceStartTimer","stopwatchServiceTimerStream","stopwatchServiceResetTimer","timeForDisplay","unsubscr","useState","hours","setHours","minutes","setMinutes","seconds","setSeconds","startButton","setStartButton","isStarted","setIsStarted","isWait","setIsWait","stopwatchUnsubcribe","unsubscribe","className","onClick","currentTime","h","m","s","subscribe","time","String","runStopwatch","disabled","event","timeStamp","pauseStopwatch","StopwatchService","startTime","timerTimeInMS","timer","timerStream","BehaviorSubject","startTimer","initialTime","Date","now","sec","Math","round","floor","convertTime","next","asObservable","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2121ba86.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './stopwatch.css';\n\nimport { Subscription } from 'rxjs';\nimport { displayedTime} from '../interfaces/displayed-time'\n\ntype stopwatchProps = {\n  stopwatchServiceStartTimer: Function;\n  stopwatchServiceTimerStream: any;\n  stopwatchServiceResetTimer: Function;\n  timeForDisplay: displayedTime;\n  unsubscr: Function;\n};\n\nexport const Timer: React.FC<stopwatchProps> = ({\n  stopwatchServiceStartTimer,\n  stopwatchServiceTimerStream,\n  stopwatchServiceResetTimer,\n  timeForDisplay,\n  unsubscr\n}) => {\n  const [hours, setHours] = useState('00');\n  const [minutes, setMinutes] = useState('00');\n  const [seconds, setSeconds] = useState('00');\n\n  const [startButton, setStartButton] = useState('Start');\n  const [isStarted, setIsStarted] = useState(false);\n  const [isWait, setIsWait] = useState(false);\n\n  let lastClick!: number;\n  let subscription!: Subscription;\n\n  function stopwatchUnsubcribe() {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n  }\n\n  function runStopwatch(): void {\n    if (!isStarted) {\n      if (!isWait) {\n        stopwatchServiceStartTimer();\n      }\n      else if (isWait) {\n        let currentTime = (+timeForDisplay.h * 3600 + +timeForDisplay.m * 60 + +timeForDisplay.s) * 1000;\n        stopwatchServiceStartTimer(currentTime);\n      }\n      subscription = stopwatchServiceTimerStream.subscribe((time: any) => {\n        timeForDisplay = time;\n\n        setHours(String(timeForDisplay.h));\n        setMinutes(String(timeForDisplay.m));\n        setSeconds(String(timeForDisplay.s));\n      });\n      setStartButton('Stop');\n    }\n    else {\n      unsubscr();\n      stopwatchUnsubcribe();\n      setHours(\"00\");\n      setMinutes(\"00\");\n      setSeconds(\"00\");\n      setStartButton('Start');\n    }\n    setIsStarted(!isStarted);\n  }\n\n  function pauseStopwatch(event: any): void {\n    if (lastClick) {\n      let diff = event.timeStamp - lastClick;\n      if (diff <= 300) {\n        stopwatchUnsubcribe()\n        unsubscr();\n        setIsStarted(false);\n        setIsWait(true);\n        setStartButton('Start');\n      }\n    }\n    lastClick = event.timeStamp;\n  }\n\n  function resetStopwatch(): void {\n    stopwatchServiceResetTimer();\n  }\n\n  return (\n    <div className=\"time-container\">\n      <span className=\"time\">{hours}:{minutes}:{seconds}</span>\n      <div className=\"control-panel\">\n        <button\n          className=\"button green-button\"\n          onClick={() => runStopwatch()}\n        >\n          {startButton}\n        </button>\n        <button\n          disabled={!isStarted}\n          className=\"button\"\n          onClick={(event) => pauseStopwatch(event)}\n        >\n          Wait\n        </button>\n        <button\n          disabled={!isStarted}\n          className=\"button reset-button\"\n          onClick={() => resetStopwatch()}\n        >\n          Reset\n        </button>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\n\nimport { timer, Observable, BehaviorSubject, Subscription } from 'rxjs';\nimport { displayedTime } from '../interfaces/displayed-time';\nimport { Timer } from '../stopwatch/stopwatch';\n\n\nexport const StopwatchService = () => {\n  const time: Observable<number> = timer(0, 1000);\n  let startTime!: number;\n  let timerTimeInMS!: number;\n  let subscription!: Subscription;\n  const timeForDisplay: displayedTime = {\n    h: \"00\",\n    m: \"00\",\n    s: \"00\"\n  };\n\n  let timerStream: BehaviorSubject <displayedTime> = new BehaviorSubject<displayedTime>(timeForDisplay);\n\n\n  function startTimer(initialTime? : number){\n    if (!initialTime){\n      startTime = Date.now();\n    }\n    else{\n      startTime = Date.now() - initialTime;\n    }\n    subscription = time.subscribe(()=>{\n      timerTimeInMS = Date.now() - startTime;\n      convertTime();\n      timerStream.next(timeForDisplay);\n    });\n    return timerStream.asObservable();\n  }\n\n  function convertTime():void{\n    let sec: number = Math.round(timerTimeInMS / 1000);\n    let s: number = sec % 60;\n    let h: number = Math.floor(sec / 60 / 60);\n    let m: number = (Math.floor(sec / 60)) - (h * 60);\n    if (h >= 10){\n      timeForDisplay.h = String(h);\n    }\n    else timeForDisplay.h = String(`0${h}`);\n    if (m >= 10){\n      timeForDisplay.m = String(m);\n    } \n    else timeForDisplay.m = String(`0${m}`);\n    if (s >= 10){\n      timeForDisplay.s = String(s);\n    }  \n    else timeForDisplay.s = String(`0${s}`);\n  }\n\n  function unsubscr() {\n    subscription.unsubscribe();\n  }\n\n  function resetTimer(){\n    subscription.unsubscribe();\n    startTimer();\n  }\n  console.log(subscription);\n\n  return (\n    <div className=\"stopwatchService\">\n      <Timer\n        stopwatchServiceStartTimer={startTimer}\n        stopwatchServiceTimerStream={timerStream}\n        stopwatchServiceResetTimer={resetTimer}\n        timeForDisplay={timeForDisplay}\n        unsubscr={unsubscr}\n      />\n    </div>\n  )\n}\n","import React from 'react';\nimport './App.css';\nimport { StopwatchService } from './components/services/stopwatchService';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <StopwatchService />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}